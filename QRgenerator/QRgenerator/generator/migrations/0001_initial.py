# Generated by Django 3.2.5 on 2021-07-27 05:44

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='QRgenerate',
            fields=[
                ('batch', models.CharField(max_length=1)),
                ('count', models.CharField(default='', max_length=5, unique=True)),
                ('uin', models.CharField(max_length=17, primary_key=True, serialize=False)),
            ],
            options={
                'get_latest_by': ['uin'],
            },
        ),
        migrations.CreateModel(
            name='UinLinK',
            fields=[
                ('date', models.DateField(default=datetime.datetime.now)),
                ('imei', models.CharField(help_text='Enter the 15 digit IMEI', max_length=15, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(15, 'Invalid IMEI')], verbose_name='IMEI')),
                ('iccid', models.CharField(help_text='Enter the 20 digit ICCID', max_length=20, unique=True, validators=[django.core.validators.MinLengthValidator(20, 'Invalid ICCID')], verbose_name='ICCID')),
                ('added_by', models.CharField(default='Admin', max_length=100)),
                ('uin', models.ForeignKey(help_text=' Scan the QR / Enter the 17 digit UIN', max_length=17, on_delete=django.db.models.deletion.CASCADE, to='generator.qrgenerate', validators=[django.core.validators.MinLengthValidator(17, 'Invalid UIN')], verbose_name='UIN')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
